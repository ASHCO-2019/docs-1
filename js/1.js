webpackJsonp([1],{14:function(module,exports,require){eval('var marked = require(38);\nvar titleToLink = require(23);\nvar hljs = require(18);\n\nfunction unescape(html) {\n	return html\n		.replace(/&#39;/g, "\'")\n		.replace(/&quot;/g, \'"\')\n		.replace(/&gt;/g, \'>\')\n		.replace(/&lt;/g, \'<\')\n		.replace(/&amp;/g, \'&\');\n}\n\nfunction escape(html) {\n	return html\n		.replace(/&/g, "&amp;")\n		.replace(/</g, "&lt;")\n		.replace(/>/g, "&gt;")\n		.replace(/"/g, "&quot;")\n		.replace(/\'/g, "&#39;");\n}\n\nmodule.exports = function renderMarkdown(md, noRefs) {\n	md = md.replace(/\\[\\[([^\\]]+?)\\s*\\|\\s*([a-z0-9 \\-_\\.]+)\\]\\]/gi, function(intraLink) {\n		// [[text | intra link]]\n		var match = /\\[\\[([^\\]]+?)\\s*\\|\\s*([a-z0-9 \\-_\\.]+)\\]\\]/gi.exec(intraLink);\n		var link = titleToLink(match[2]);\n		return "[" + match[1] + "](" + link + ".html)";\n	}).replace(/\\[\\[([a-z0-9 \\-_\\.]+)\\]\\]/gi, function(intraLink) {\n		// [[intra link]]\n		var match = /\\[\\[(.+)\\]\\]/gi.exec(intraLink);\n		var link = titleToLink(match[1]);\n		return "[" + match[1] + "](" + link + ".html)";\n	});\n	var renderer = new marked.Renderer();\n	renderer.code = function(code, lang) {\n		var html = false;\n		if(lang === "html") lang = "xml";\n		try {\n			if(lang) html = hljs.highlight(lang, code).value;\n			else html = hljs.highlightAuto(code).value;\n		} catch(e) {\n			html = escape(code);\n		}\n		return "<pre><code>" + html + "</code></pre>";\n	};\n	renderer.codespan = function(code) {\n		code = unescape(code);\n		var html = hljs.highlight("javascript", code).value;\n		return "<code>" + html + "</code>";\n	};\n	renderer.heading = function(text, level, raw, options) {\n		if(noRefs) {\n			return \'<h\'\n				+ level\n				+ \'>\'\n				+ text\n				+ \'</h\'\n				+ level\n				+ \'>\\n\';\n		} else {\n			return \'<h\'\n				+ level\n				+ \'><a class="anchor" href="#\'\n				+ raw.toLowerCase().trim().replace(/[^\\w]+/g, \'-\').replace(/^\\-+|\\-+$/g, "")\n				+ \'" id="\'\n				+ raw.toLowerCase().trim().replace(/[^\\w]+/g, \'-\').replace(/^\\-+|\\-+$/g, "")\n				+ \'"><i class="glyphicon glyphicon-link"></i></a>\'\n				+ text\n				+ \'</h\'\n				+ level\n				+ \'>\\n\';\n		}\n	};\n	renderer.table = function(header, body) {\n		return \'<table class="table table-bordered table-striped table-hover">\\n\'\n			+ \'<thead>\\n\'\n			+ header\n			+ \'</thead>\\n\'\n			+ \'<tbody>\\n\'\n			+ body\n			+ \'</tbody>\\n\'\n			+ \'</table>\\n\';\n	};\n	return marked(md, {\n		renderer: renderer,\n		gfm: true,\n		tables: true,\n		breaks: false,\n		smartLists: true,\n		smartypants: true\n	});\n}\n\n\n// WEBPACK FOOTER\n// module.id = 14\n// module.readableIdentifier = ./lib/renderMarkdown.js\n//@ sourceURL=webpack-module:///./lib/renderMarkdown.js')},16:function(module,exports,require){eval("module.exports = function(hljs) {\n  var KEYWORDS = {\n    keyword:\n      // JS keywords\n      'in if for while finally new do return else break catch instanceof throw try this ' +\n      'switch continue typeof delete debugger super ' +\n      // Coffee keywords\n      'then unless until loop of by when and or is isnt not',\n    literal:\n      // JS literals\n      'true false null undefined ' +\n      // Coffee literals\n      'yes no on off',\n    reserved:\n      'case default function var void with const let enum export import native ' +\n      '__hasProp __extends __slice __bind __indexOf',\n    built_in:\n      'npm require console print module exports global window document'\n  };\n  var JS_IDENT_RE = '[A-Za-z$_][0-9A-Za-z$_]*';\n  var TITLE = {className: 'title', begin: JS_IDENT_RE};\n  var SUBST = {\n    className: 'subst',\n    begin: '#\\\\{', end: '}',\n    keywords: KEYWORDS,\n  };\n  var EXPRESSIONS = [\n    // Numbers\n    hljs.BINARY_NUMBER_MODE,\n    hljs.inherit(hljs.C_NUMBER_MODE, {starts: {end: '(\\\\s*/)?', relevance: 0}}), // a number tries to eat the following slash to prevent treating it as a regexp\n    // Strings\n    {\n      className: 'string',\n      begin: '\\'\\'\\'', end: '\\'\\'\\'',\n      contains: [hljs.BACKSLASH_ESCAPE]\n    },\n    {\n      className: 'string',\n      begin: '\\'', end: '\\'',\n      contains: [hljs.BACKSLASH_ESCAPE],\n      relevance: 0\n    },\n    {\n      className: 'string',\n      begin: '\"\"\"', end: '\"\"\"',\n      contains: [hljs.BACKSLASH_ESCAPE, SUBST]\n    },\n    {\n      className: 'string',\n      begin: '\"', end: '\"',\n      contains: [hljs.BACKSLASH_ESCAPE, SUBST],\n      relevance: 0\n    },\n    // RegExps\n    {\n      className: 'regexp',\n      begin: '///', end: '///',\n      contains: [hljs.HASH_COMMENT_MODE]\n    },\n    {\n      className: 'regexp', begin: '//[gim]*',\n      relevance: 0\n    },\n    {\n      className: 'regexp',\n      begin: '/\\\\S(\\\\\\\\.|[^\\\\n])*?/[gim]*(?=\\\\s|\\\\W|$)' // \\S is required to parse x / 2 / 3 as two divisions\n    },\n\n    {\n      className: 'property',\n      begin: '@' + JS_IDENT_RE\n    },\n    {\n      begin: '`', end: '`',\n      excludeBegin: true, excludeEnd: true,\n      subLanguage: 'javascript'\n    }\n  ];\n  SUBST.contains = EXPRESSIONS;\n\n  return {\n    keywords: KEYWORDS,\n    contains: EXPRESSIONS.concat([\n      {\n        className: 'comment',\n        begin: '###', end: '###'\n      },\n      hljs.HASH_COMMENT_MODE,\n      {\n        className: 'function',\n        begin: '(' + JS_IDENT_RE + '\\\\s*=\\\\s*)?(\\\\(.*\\\\))?\\\\s*[-=]>', end: '[-=]>',\n        returnBegin: true,\n        contains: [\n          TITLE,\n          {\n            className: 'params',\n            begin: '\\\\(', returnBegin: true,\n            /* We need another contained nameless mode to not have every nested\n            pair of parens to be called \"params\" */\n            contains: [{\n              begin: /\\(/, end: /\\)/,\n              keywords: KEYWORDS,\n              contains: ['self'].concat(EXPRESSIONS)\n            }]\n          }\n        ]\n      },\n      {\n        className: 'class',\n        beginWithKeyword: true, keywords: 'class',\n        end: '$',\n        illegal: '[:\\\\[\\\\]]',\n        contains: [\n          {\n            beginWithKeyword: true, keywords: 'extends',\n            endsWithParent: true,\n            illegal: ':',\n            contains: [TITLE]\n          },\n          TITLE\n        ]\n      },\n      {\n        className: 'attribute',\n        begin: JS_IDENT_RE + ':', end: ':',\n        returnBegin: true, excludeEnd: true\n      }\n    ])\n  };\n};\n\n// WEBPACK FOOTER\n// module.id = 16\n// module.readableIdentifier = ./lib/highlight.js/coffeescript.js\n//@ sourceURL=webpack-module:///./lib/highlight.js/coffeescript.js")},17:function(module,exports,require){eval("module.exports = function(hljs) {\n  var IDENT_RE = '[a-zA-Z-][a-zA-Z0-9_-]*';\n  var FUNCTION = {\n    className: 'function',\n    begin: IDENT_RE + '\\\\(', end: '\\\\)',\n    contains: ['self', hljs.NUMBER_MODE, hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE]\n  };\n  return {\n    case_insensitive: true,\n    illegal: '[=/|\\']',\n    contains: [\n      hljs.C_BLOCK_COMMENT_MODE,\n      {\n        className: 'id', begin: '\\\\#[A-Za-z0-9_-]+'\n      },\n      {\n        className: 'class', begin: '\\\\.[A-Za-z0-9_-]+',\n        relevance: 0\n      },\n      {\n        className: 'attr_selector',\n        begin: '\\\\[', end: '\\\\]',\n        illegal: '$'\n      },\n      {\n        className: 'pseudo',\n        begin: ':(:)?[a-zA-Z0-9\\\\_\\\\-\\\\+\\\\(\\\\)\\\\\"\\\\\\']+'\n      },\n      {\n        className: 'at_rule',\n        begin: '@(font-face|page)',\n        lexems: '[a-z-]+',\n        keywords: 'font-face page'\n      },\n      {\n        className: 'at_rule',\n        begin: '@', end: '[{;]', // at_rule eating first \"{\" is a good thing\n                                 // because it doesnâ€™t let it to be parsed as\n                                 // a rule set but instead drops parser into\n                                 // the default mode which is how it should be.\n        contains: [\n          {\n            className: 'keyword',\n            begin: /\\S+/\n          },\n          {\n            begin: /\\s/, endsWithParent: true, excludeEnd: true,\n            relevance: 0,\n            contains: [\n              FUNCTION,\n              hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE,\n              hljs.NUMBER_MODE\n            ]\n          }\n        ]\n      },\n      {\n        className: 'tag', begin: IDENT_RE,\n        relevance: 0\n      },\n      {\n        className: 'rules',\n        begin: '{', end: '}',\n        illegal: '[^\\\\s]',\n        relevance: 0,\n        contains: [\n          hljs.C_BLOCK_COMMENT_MODE,\n          {\n            className: 'rule',\n            begin: '[^\\\\s]', returnBegin: true, end: ';', endsWithParent: true,\n            contains: [\n              {\n                className: 'attribute',\n                begin: '[A-Z\\\\_\\\\.\\\\-]+', end: ':',\n                excludeEnd: true,\n                illegal: '[^\\\\s]',\n                starts: {\n                  className: 'value',\n                  endsWithParent: true, excludeEnd: true,\n                  contains: [\n                    FUNCTION,\n                    hljs.NUMBER_MODE,\n                    hljs.QUOTE_STRING_MODE,\n                    hljs.APOS_STRING_MODE,\n                    hljs.C_BLOCK_COMMENT_MODE,\n                    {\n                      className: 'hexcolor', begin: '#[0-9A-Fa-f]+'\n                    },\n                    {\n                      className: 'important', begin: '!important'\n                    }\n                  ]\n                }\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  };\n};\n\n// WEBPACK FOOTER\n// module.id = 17\n// module.readableIdentifier = ./lib/highlight.js/css.js\n//@ sourceURL=webpack-module:///./lib/highlight.js/css.js")},18:function(module,exports,require){eval("var hljs = new function() {\n\n  /* Utility functions */\n\n  function escape(value) {\n    return value.replace(/&/gm, '&amp;').replace(/</gm, '&lt;').replace(/>/gm, '&gt;');\n  }\n\n  function findCode(pre) {\n    for (var node = pre.firstChild; node; node = node.nextSibling) {\n      if (node.nodeName.toUpperCase () == 'CODE')\n        return node;\n      if (!(node.nodeType == 3 && node.nodeValue.match(/\\s+/)))\n        break;\n    }\n  }\n\n  function blockText(block, ignoreNewLines) {\n    return Array.prototype.map.call(block.childNodes, function(node) {\n      if (node.nodeType == 3) {\n        return ignoreNewLines ? node.nodeValue.replace(/\\n/g, '') : node.nodeValue;\n      }\n      if (node.nodeName.toUpperCase () == 'BR') {\n        return '\\n';\n      }\n      return blockText(node, ignoreNewLines);\n    }).join('');\n  }\n\n  function blockLanguage(block) {\n    var classes = (block.className + ' ' + (block.parentNode ? block.parentNode.className : '')).split(/\\s+/);\n    classes = classes.map(function(c) {return c.replace(/^language-/, '');});\n    for (var i = 0; i < classes.length; i++) {\n      if (languages[classes[i]] || classes[i] == 'no-highlight') {\n        return classes[i];\n      }\n    }\n  }\n\n  /* Stream merging */\n\n  function nodeStream(node) {\n    var result = [];\n    (function _nodeStream(node, offset) {\n      for (var child = node.firstChild; child; child = child.nextSibling) {\n        if (child.nodeType == 3)\n          offset += child.nodeValue.length;\n        else if (child.nodeName.toUpperCase() == 'BR')\n          offset += 1;\n        else if (child.nodeType == 1) {\n          result.push({\n            event: 'start',\n            offset: offset,\n            node: child\n          });\n          offset = _nodeStream(child, offset);\n          result.push({\n            event: 'stop',\n            offset: offset,\n            node: child\n          });\n        }\n      }\n      return offset;\n    })(node, 0);\n    return result;\n  }\n\n  function mergeStreams(original, highlighted, value) {\n    var processed = 0;\n    var result = '';\n    var nodeStack = [];\n\n    function selectStream() {\n      if (!original.length || !highlighted.length) {\n        return original.length ? original : highlighted;\n      }\n      if (original[0].offset != highlighted[0].offset) {\n        return (original[0].offset < highlighted[0].offset) ? original : highlighted;\n      }\n\n      /*\n      To avoid starting the stream just before it should stop the order is\n      ensured that original always starts first and closes last:\n\n      if (event1 == 'start' && event2 == 'start')\n        return original;\n      if (event1 == 'start' && event2 == 'stop')\n        return highlighted;\n      if (event1 == 'stop' && event2 == 'start')\n        return original;\n      if (event1 == 'stop' && event2 == 'stop')\n        return highlighted;\n\n      ... which is collapsed to:\n      */\n      return highlighted[0].event == 'start' ? original : highlighted;\n    }\n\n    function open(node) {\n      function attr_str(a) {return ' ' + a.nodeName + '=\"' + escape(a.value) + '\"';}\n      result += '<' + node.nodeName.toLowerCase() + Array.prototype.map.call(node.attributes, attr_str).join('') + '>';\n    }\n\n    function close(node) {\n      result += '</' + node.nodeName.toLowerCase() + '>';\n    }\n\n    function render(event) {\n      (event.event == 'start' ? open : close)(event.node);\n    }\n\n    while (original.length || highlighted.length) {\n      var stream = selectStream();\n      result += escape(value.substr(processed, stream[0].offset - processed));\n      processed = stream[0].offset;\n      if (stream == original) {\n        /*\n        On any opening or closing tag of the original markup we first close\n        the entire highlighted node stack, then render the original tag along\n        with all the following original tags at the same offset and then\n        reopen all the tags on the highlighted stack.\n        */\n        nodeStack.reverse().forEach(close);\n        do {\n          render(stream.splice(0, 1)[0]);\n          stream = selectStream();\n        } while (stream == original && stream.length && stream[0].offset == processed);\n        nodeStack.reverse().forEach(open);\n      } else {\n        if (stream[0].event == 'start') {\n          nodeStack.push(stream[0].node);\n        } else {\n          nodeStack.pop();\n        }\n        render(stream.splice(0, 1)[0]);\n      }\n    }\n    return result + escape(value.substr(processed));\n  }\n\n  /* Initialization */\n\n  function compileLanguage(language) {\n\n    function reStr(re) {\n        return (re && re.source) || re;\n    }\n\n    function langRe(value, global) {\n      return RegExp(\n        reStr(value),\n        'm' + (language.case_insensitive ? 'i' : '') + (global ? 'g' : '')\n      );\n    }\n\n    function compileMode(mode, parent) {\n      if (mode.compiled)\n        return;\n      mode.compiled = true;\n\n      var keywords = []; // used later with beginWithKeyword but filled as a side-effect of keywords compilation\n      if (mode.keywords) {\n        var compiled_keywords = {};\n\n        function flatten(className, str) {\n          if (language.case_insensitive) {\n            str = str.toLowerCase();\n          }\n          str.split(' ').forEach(function(kw) {\n            var pair = kw.split('|');\n            compiled_keywords[pair[0]] = [className, pair[1] ? Number(pair[1]) : 1];\n            keywords.push(pair[0]);\n          });\n        }\n\n        mode.lexemsRe = langRe(mode.lexems || '\\\\b' + hljs.IDENT_RE + '\\\\b(?!\\\\.)', true);\n        if (typeof mode.keywords == 'string') { // string\n          flatten('keyword', mode.keywords);\n        } else {\n          for (var className in mode.keywords) {\n            if (!mode.keywords.hasOwnProperty(className))\n              continue;\n            flatten(className, mode.keywords[className]);\n          }\n        }\n        mode.keywords = compiled_keywords;\n      }\n      if (parent) {\n        if (mode.beginWithKeyword) {\n          mode.begin = '\\\\b(' + keywords.join('|') + ')\\\\b(?!\\\\.)\\\\s*';\n        }\n        mode.beginRe = langRe(mode.begin ? mode.begin : '\\\\B|\\\\b');\n        if (!mode.end && !mode.endsWithParent)\n          mode.end = '\\\\B|\\\\b';\n        if (mode.end)\n          mode.endRe = langRe(mode.end);\n        mode.terminator_end = reStr(mode.end) || '';\n        if (mode.endsWithParent && parent.terminator_end)\n          mode.terminator_end += (mode.end ? '|' : '') + parent.terminator_end;\n      }\n      if (mode.illegal)\n        mode.illegalRe = langRe(mode.illegal);\n      if (mode.relevance === undefined)\n        mode.relevance = 1;\n      if (!mode.contains) {\n        mode.contains = [];\n      }\n      for (var i = 0; i < mode.contains.length; i++) {\n        if (mode.contains[i] == 'self') {\n          mode.contains[i] = mode;\n        }\n        compileMode(mode.contains[i], mode);\n      }\n      if (mode.starts) {\n        compileMode(mode.starts, parent);\n      }\n\n      var terminators = [];\n      for (var i = 0; i < mode.contains.length; i++) {\n        terminators.push(reStr(mode.contains[i].begin));\n      }\n      if (mode.terminator_end) {\n        terminators.push(reStr(mode.terminator_end));\n      }\n      if (mode.illegal) {\n        terminators.push(reStr(mode.illegal));\n      }\n      mode.terminators = terminators.length ? langRe(terminators.join('|'), true) : {exec: function(s) {return null;}};\n    }\n\n    compileMode(language);\n  }\n\n  /*\n  Core highlighting function. Accepts a language name and a string with the\n  code to highlight. Returns an object with the following properties:\n\n  - relevance (int)\n  - keyword_count (int)\n  - value (an HTML string with highlighting markup)\n\n  */\n  function highlight(language_name, value, ignore_illegals, continuation) {\n\n    function subMode(lexem, mode) {\n      for (var i = 0; i < mode.contains.length; i++) {\n        var match = mode.contains[i].beginRe.exec(lexem);\n        if (match && match.index == 0) {\n          return mode.contains[i];\n        }\n      }\n    }\n\n    function endOfMode(mode, lexem) {\n      if (mode.end && mode.endRe.test(lexem)) {\n        return mode;\n      }\n      if (mode.endsWithParent) {\n        return endOfMode(mode.parent, lexem);\n      }\n    }\n\n    function isIllegal(lexem, mode) {\n      return !ignore_illegals && mode.illegal && mode.illegalRe.test(lexem);\n    }\n\n    function keywordMatch(mode, match) {\n      var match_str = language.case_insensitive ? match[0].toLowerCase() : match[0];\n      return mode.keywords.hasOwnProperty(match_str) && mode.keywords[match_str];\n    }\n\n    function processKeywords() {\n      var buffer = escape(mode_buffer);\n      if (!top.keywords)\n        return buffer;\n      var result = '';\n      var last_index = 0;\n      top.lexemsRe.lastIndex = 0;\n      var match = top.lexemsRe.exec(buffer);\n      while (match) {\n        result += buffer.substr(last_index, match.index - last_index);\n        var keyword_match = keywordMatch(top, match);\n        if (keyword_match) {\n          keyword_count += keyword_match[1];\n          result += '<span class=\"'+ keyword_match[0] +'\">' + match[0] + '</span>';\n        } else {\n          result += match[0];\n        }\n        last_index = top.lexemsRe.lastIndex;\n        match = top.lexemsRe.exec(buffer);\n      }\n      return result + buffer.substr(last_index);\n    }\n\n    function processSubLanguage() {\n      if (top.subLanguage && !languages[top.subLanguage]) {\n        return escape(mode_buffer);\n      }\n      var continuation = top.subLanguageMode == 'continuous' ? top.top : undefined;\n      var result = top.subLanguage ? highlight(top.subLanguage, mode_buffer, true, continuation) : highlightAuto(mode_buffer);\n      // Counting embedded language score towards the host language may be disabled\n      // with zeroing the containing mode relevance. Usecase in point is Markdown that\n      // allows XML everywhere and makes every XML snippet to have a much larger Markdown\n      // score.\n      if (top.relevance > 0) {\n        keyword_count += result.keyword_count;\n        relevance += result.relevance;\n      }\n      top.top = result.top;\n      return '<span class=\"' + result.language  + '\">' + result.value + '</span>';\n    }\n\n    function processBuffer() {\n      return top.subLanguage !== undefined ? processSubLanguage() : processKeywords();\n    }\n\n    function startNewMode(mode, lexem) {\n      var markup = mode.className? '<span class=\"' + mode.className + '\">': '';\n      if (mode.returnBegin) {\n        result += markup;\n        mode_buffer = '';\n      } else if (mode.excludeBegin) {\n        result += escape(lexem) + markup;\n        mode_buffer = '';\n      } else {\n        result += markup;\n        mode_buffer = lexem;\n      }\n      top = Object.create(mode, {parent: {value: top}});\n    }\n\n    function processLexem(buffer, lexem) {\n      mode_buffer += buffer;\n      if (lexem === undefined) {\n        result += processBuffer();\n        return 0;\n      }\n\n      var new_mode = subMode(lexem, top);\n      if (new_mode) {\n        result += processBuffer();\n        startNewMode(new_mode, lexem);\n        return new_mode.returnBegin ? 0 : lexem.length;\n      }\n\n      var end_mode = endOfMode(top, lexem);\n      if (end_mode) {\n        var origin = top;\n        if (!(origin.returnEnd || origin.excludeEnd)) {\n          mode_buffer += lexem;\n        }\n        result += processBuffer();\n        do {\n          if (top.className) {\n            result += '</span>';\n          }\n          relevance += top.relevance;\n          top = top.parent;\n        } while (top != end_mode.parent);\n        if (origin.excludeEnd) {\n          result += escape(lexem);\n        }\n        mode_buffer = '';\n        if (end_mode.starts) {\n          startNewMode(end_mode.starts, '');\n        }\n        return origin.returnEnd ? 0 : lexem.length;\n      }\n\n      if (isIllegal(lexem, top))\n        throw new Error('Illegal lexem \"' + lexem + '\" for mode \"' + (top.className || '<unnamed>') + '\"');\n\n      /*\n      Parser should not reach this point as all types of lexems should be caught\n      earlier, but if it does due to some bug make sure it advances at least one\n      character forward to prevent infinite looping.\n      */\n      mode_buffer += lexem;\n      return lexem.length || 1;\n    }\n\n    var language = languages[language_name];\n    if (!language) {\n      throw new Error('Unknown language: \"' + language_name + '\"');\n    }\n\n    compileLanguage(language);\n    var top = continuation || language;\n    var result = '';\n    for(var current = top; current != language; current = current.parent) {\n      if (current.className) {\n        result = '<span class=\"' + current.className +'\">' + result;\n      }\n    }\n    var mode_buffer = '';\n    var relevance = 0;\n    var keyword_count = 0;\n    try {\n      var match, count, index = 0;\n      while (true) {\n        top.terminators.lastIndex = index;\n        match = top.terminators.exec(value);\n        if (!match)\n          break;\n        count = processLexem(value.substr(index, match.index - index), match[0]);\n        index = match.index + count;\n      }\n      processLexem(value.substr(index));\n      for(var current = top; current.parent; current = current.parent) { // close dangling modes\n        if (current.className) {\n          result += '</span>';\n        }\n      };\n      return {\n        relevance: relevance,\n        keyword_count: keyword_count,\n        value: result,\n        language: language_name,\n        top: top\n      };\n    } catch (e) {\n      if (e.message.indexOf('Illegal') != -1) {\n        return {\n          relevance: 0,\n          keyword_count: 0,\n          value: escape(value)\n        };\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  /*\n  Highlighting with language detection. Accepts a string with the code to\n  highlight. Returns an object with the following properties:\n\n  - language (detected language)\n  - relevance (int)\n  - keyword_count (int)\n  - value (an HTML string with highlighting markup)\n  - second_best (object with the same structure for second-best heuristically\n    detected language, may be absent)\n\n  */\n  function highlightAuto(text) {\n    var result = {\n      keyword_count: 0,\n      relevance: 0,\n      value: escape(text)\n    };\n    var second_best = result;\n    for (var key in languages) {\n      if (!languages.hasOwnProperty(key))\n        continue;\n      var current = highlight(key, text, false);\n      current.language = key;\n      if (current.keyword_count + current.relevance > second_best.keyword_count + second_best.relevance) {\n        second_best = current;\n      }\n      if (current.keyword_count + current.relevance > result.keyword_count + result.relevance) {\n        second_best = result;\n        result = current;\n      }\n    }\n    if (second_best.language) {\n      result.second_best = second_best;\n    }\n    return result;\n  }\n\n  /*\n  Post-processing of the highlighted markup:\n\n  - replace TABs with something more useful\n  - replace real line-breaks with '<br>' for non-pre containers\n\n  */\n  function fixMarkup(value, tabReplace, useBR) {\n    if (tabReplace) {\n      value = value.replace(/^((<[^>]+>|\\t)+)/gm, function(match, p1, offset, s) {\n        return p1.replace(/\\t/g, tabReplace);\n      });\n    }\n    if (useBR) {\n      value = value.replace(/\\n/g, '<br>');\n    }\n    return value;\n  }\n\n  /*\n  Applies highlighting to a DOM node containing code. Accepts a DOM node and\n  two optional parameters for fixMarkup.\n  */\n  function highlightBlock(block, tabReplace, useBR) {\n    var text = blockText(block, useBR);\n    var language = blockLanguage(block);\n    if (language == 'no-highlight')\n        return;\n    var result = language ? highlight(language, text, true) : highlightAuto(text);\n    language = result.language;\n    var original = nodeStream(block);\n    if (original.length) {\n      var pre = document.createElementNS('http://www.w3.org/1999/xhtml', 'pre');\n      pre.innerHTML = result.value;\n      result.value = mergeStreams(original, nodeStream(pre), text);\n    }\n    result.value = fixMarkup(result.value, tabReplace, useBR);\n\n    var class_name = block.className;\n    if (!class_name.match('(\\\\s|^)(language-)?' + language + '(\\\\s|$)')) {\n      class_name = class_name ? (class_name + ' ' + language) : language;\n    }\n    block.innerHTML = result.value;\n    block.className = class_name;\n    block.result = {\n      language: language,\n      kw: result.keyword_count,\n      re: result.relevance\n    };\n    if (result.second_best) {\n      block.second_best = {\n        language: result.second_best.language,\n        kw: result.second_best.keyword_count,\n        re: result.second_best.relevance\n      };\n    }\n  }\n\n  /*\n  Applies highlighting to all <pre><code>..</code></pre> blocks on a page.\n  */\n  function initHighlighting() {\n    if (initHighlighting.called)\n      return;\n    initHighlighting.called = true;\n    Array.prototype.map.call(document.getElementsByTagNameNS('http://www.w3.org/1999/xhtml', 'pre'), findCode).\n      filter(Boolean).\n      forEach(function(code){highlightBlock(code, hljs.tabReplace);});\n  }\n\n  /*\n  Attaches highlighting to the page load event.\n  */\n  function initHighlightingOnLoad() {\n    window.addEventListener('DOMContentLoaded', initHighlighting, false);\n    window.addEventListener('load', initHighlighting, false);\n  }\n\n  var languages = {}; // a shortcut to avoid writing \"this.\" everywhere\n\n  /* Interface definition */\n\n  this.LANGUAGES = languages;\n  this.highlight = highlight;\n  this.highlightAuto = highlightAuto;\n  this.fixMarkup = fixMarkup;\n  this.highlightBlock = highlightBlock;\n  this.initHighlighting = initHighlighting;\n  this.initHighlightingOnLoad = initHighlightingOnLoad;\n\n  // Common regexps\n  this.IDENT_RE = '[a-zA-Z][a-zA-Z0-9_]*';\n  this.UNDERSCORE_IDENT_RE = '[a-zA-Z_][a-zA-Z0-9_]*';\n  this.NUMBER_RE = '\\\\b\\\\d+(\\\\.\\\\d+)?';\n  this.C_NUMBER_RE = '(\\\\b0[xX][a-fA-F0-9]+|(\\\\b\\\\d+(\\\\.\\\\d*)?|\\\\.\\\\d+)([eE][-+]?\\\\d+)?)'; // 0x..., 0..., decimal, float\n  this.BINARY_NUMBER_RE = '\\\\b(0b[01]+)'; // 0b...\n  this.RE_STARTERS_RE = '!|!=|!==|%|%=|&|&&|&=|\\\\*|\\\\*=|\\\\+|\\\\+=|,|\\\\.|-|-=|/|/=|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\\\?|\\\\[|\\\\{|\\\\(|\\\\^|\\\\^=|\\\\||\\\\|=|\\\\|\\\\||~';\n\n  // Common modes\n  this.BACKSLASH_ESCAPE = {\n    begin: '\\\\\\\\[\\\\s\\\\S]', relevance: 0\n  };\n  this.APOS_STRING_MODE = {\n    className: 'string',\n    begin: '\\'', end: '\\'',\n    illegal: '\\\\n',\n    contains: [this.BACKSLASH_ESCAPE],\n    relevance: 0\n  };\n  this.QUOTE_STRING_MODE = {\n    className: 'string',\n    begin: '\"', end: '\"',\n    illegal: '\\\\n',\n    contains: [this.BACKSLASH_ESCAPE],\n    relevance: 0\n  };\n  this.C_LINE_COMMENT_MODE = {\n    className: 'comment',\n    begin: '//', end: '$'\n  };\n  this.C_BLOCK_COMMENT_MODE = {\n    className: 'comment',\n    begin: '/\\\\*', end: '\\\\*/'\n  };\n  this.HASH_COMMENT_MODE = {\n    className: 'comment',\n    begin: '#', end: '$'\n  };\n  this.NUMBER_MODE = {\n    className: 'number',\n    begin: this.NUMBER_RE,\n    relevance: 0\n  };\n  this.C_NUMBER_MODE = {\n    className: 'number',\n    begin: this.C_NUMBER_RE,\n    relevance: 0\n  };\n  this.BINARY_NUMBER_MODE = {\n    className: 'number',\n    begin: this.BINARY_NUMBER_RE,\n    relevance: 0\n  };\n  this.REGEXP_MODE = {\n    className: 'regexp',\n    begin: /\\//, end: /\\/[gim]*/,\n    illegal: /\\n/,\n    contains: [\n      this.BACKSLASH_ESCAPE,\n      {\n        begin: /\\[/, end: /\\]/,\n        relevance: 0,\n        contains: [this.BACKSLASH_ESCAPE]\n      }\n    ]\n  };\n\n  // Utility functions\n  this.inherit = function(parent, obj) {\n    var result = {};\n    for (var key in parent)\n      result[key] = parent[key];\n    if (obj)\n      for (var key in obj)\n        result[key] = obj[key];\n    return result;\n  };\n}();\nhljs.LANGUAGES['coffeescript'] = require(16)(hljs);\nhljs.LANGUAGES['css'] = require(17)(hljs);\nhljs.LANGUAGES['javascript'] = require(19)(hljs);\nhljs.LANGUAGES['json'] = require(20)(hljs);\nhljs.LANGUAGES['xml'] = require(21)(hljs);\nmodule.exports = hljs;\n\n// WEBPACK FOOTER\n// module.id = 18\n// module.readableIdentifier = ./lib/highlight.js/highlight.js\n//@ sourceURL=webpack-module:///./lib/highlight.js/highlight.js")},19:function(module,exports,require){eval("module.exports = function(hljs) {\n  return {\n    keywords: {\n      keyword:\n        'in if for while finally var new function do return void else break catch ' +\n        'instanceof with throw case default try this switch continue typeof delete ' +\n        'let yield const',\n      literal:\n        'true false null undefined NaN Infinity'\n    },\n    contains: [\n      hljs.APOS_STRING_MODE,\n      hljs.QUOTE_STRING_MODE,\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      hljs.C_NUMBER_MODE,\n      { // \"value\" container\n        begin: '(' + hljs.RE_STARTERS_RE + '|\\\\b(case|return|throw)\\\\b)\\\\s*',\n        keywords: 'return throw case',\n        contains: [\n          hljs.C_LINE_COMMENT_MODE,\n          hljs.C_BLOCK_COMMENT_MODE,\n          hljs.REGEXP_MODE,\n          { // E4X\n            begin: /</, end: />;/,\n            subLanguage: 'xml'\n          }\n        ],\n        relevance: 0\n      },\n      {\n        className: 'function',\n        beginWithKeyword: true, end: /{/,\n        keywords: 'function',\n        contains: [\n          {\n            className: 'title', begin: /[A-Za-z$_][0-9A-Za-z$_]*/\n          },\n          {\n            className: 'params',\n            begin: /\\(/, end: /\\)/,\n            contains: [\n              hljs.C_LINE_COMMENT_MODE,\n              hljs.C_BLOCK_COMMENT_MODE\n            ],\n            illegal: /[\"'\\(]/\n          }\n        ],\n        illegal: /\\[|%/\n      }\n    ]\n  };\n};\n\n// WEBPACK FOOTER\n// module.id = 19\n// module.readableIdentifier = ./lib/highlight.js/javascript.js\n//@ sourceURL=webpack-module:///./lib/highlight.js/javascript.js")
},20:function(module,exports,require){eval("module.exports = function(hljs) {\n  var LITERALS = {literal: 'true false null'};\n  var TYPES = [\n    hljs.QUOTE_STRING_MODE,\n    hljs.C_NUMBER_MODE\n  ];\n  var VALUE_CONTAINER = {\n    className: 'value',\n    end: ',', endsWithParent: true, excludeEnd: true,\n    contains: TYPES,\n    keywords: LITERALS\n  };\n  var OBJECT = {\n    begin: '{', end: '}',\n    contains: [\n      {\n        className: 'attribute',\n        begin: '\\\\s*\"', end: '\"\\\\s*:\\\\s*', excludeBegin: true, excludeEnd: true,\n        contains: [hljs.BACKSLASH_ESCAPE],\n        illegal: '\\\\n',\n        starts: VALUE_CONTAINER\n      }\n    ],\n    illegal: '\\\\S'\n  };\n  var ARRAY = {\n    begin: '\\\\[', end: '\\\\]',\n    contains: [hljs.inherit(VALUE_CONTAINER, {className: null})], // inherit is also a workaround for a bug that makes shared modes with endsWithParent compile only the ending of one of the parents\n    illegal: '\\\\S'\n  };\n  TYPES.splice(TYPES.length, 0, OBJECT, ARRAY);\n  return {\n    contains: TYPES,\n    keywords: LITERALS,\n    illegal: '\\\\S'\n  };\n};\n\n// WEBPACK FOOTER\n// module.id = 20\n// module.readableIdentifier = ./lib/highlight.js/json.js\n//@ sourceURL=webpack-module:///./lib/highlight.js/json.js")},21:function(module,exports,require){eval("module.exports = function(hljs) {\n  var XML_IDENT_RE = '[A-Za-z0-9\\\\._:-]+';\n  var TAG_INTERNALS = {\n    endsWithParent: true,\n    relevance: 0,\n    contains: [\n      {\n        className: 'attribute',\n        begin: XML_IDENT_RE,\n        relevance: 0\n      },\n      {\n        begin: '=\"', returnBegin: true, end: '\"',\n        contains: [{\n            className: 'value',\n            begin: '\"', endsWithParent: true\n        }]\n      },\n      {\n        begin: '=\\'', returnBegin: true, end: '\\'',\n        contains: [{\n          className: 'value',\n          begin: '\\'', endsWithParent: true\n        }]\n      },\n      {\n        begin: '=',\n        contains: [{\n          className: 'value',\n          begin: '[^\\\\s/>]+'\n        }]\n      }\n    ]\n  };\n  return {\n    case_insensitive: true,\n    contains: [\n      {\n        className: 'pi',\n        begin: '<\\\\?', end: '\\\\?>',\n        relevance: 10\n      },\n      {\n        className: 'doctype',\n        begin: '<!DOCTYPE', end: '>',\n        relevance: 10,\n        contains: [{begin: '\\\\[', end: '\\\\]'}]\n      },\n      {\n        className: 'comment',\n        begin: '<!--', end: '-->',\n        relevance: 10\n      },\n      {\n        className: 'cdata',\n        begin: '<\\\\!\\\\[CDATA\\\\[', end: '\\\\]\\\\]>',\n        relevance: 10\n      },\n      {\n        className: 'tag',\n        /*\n        The lookahead pattern (?=...) ensures that 'begin' only matches\n        '<style' as a single word, followed by a whitespace or an\n        ending braket. The '$' is needed for the lexem to be recognized\n        by hljs.subMode() that tests lexems outside the stream.\n        */\n        begin: '<style(?=\\\\s|>|$)', end: '>',\n        keywords: {title: 'style'},\n        contains: [TAG_INTERNALS],\n        starts: {\n          end: '</style>', returnEnd: true,\n          subLanguage: 'css'\n        }\n      },\n      {\n        className: 'tag',\n        // See the comment in the <style tag about the lookahead pattern\n        begin: '<script(?=\\\\s|>|$)', end: '>',\n        keywords: {title: 'script'},\n        contains: [TAG_INTERNALS],\n        starts: {\n          end: '</script>', returnEnd: true,\n          subLanguage: 'javascript'\n        }\n      },\n      {\n        begin: '<%', end: '%>',\n        subLanguage: 'vbscript'\n      },\n      {\n        className: 'tag',\n        begin: '</?', end: '/?>',\n        relevance: 0,\n        contains: [\n          {\n            className: 'title', begin: '[^ /><]+'\n          },\n          TAG_INTERNALS\n        ]\n      }\n    ]\n  };\n};\n\n// WEBPACK FOOTER\n// module.id = 21\n// module.readableIdentifier = ./lib/highlight.js/xml.js\n//@ sourceURL=webpack-module:///./lib/highlight.js/xml.js")},23:function(module,exports,require){eval('module.exports = function titleToLink(title) {\n	if(!title) return title;\n	return title.replace(/[ _]/g, "-").toLowerCase();\n}\n\n\n// WEBPACK FOOTER\n// module.id = 23\n// module.readableIdentifier = ./lib/titleToLink.js\n//@ sourceURL=webpack-module:///./lib/titleToLink.js')},38:function(module,exports,require){eval("/* WEBPACK VAR INJECTION */(function(require, global) {/**\n * marked - a markdown parser\n * Copyright (c) 2011-2013, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/chjj/marked\n */\n\n;(function() {\n\n/**\n * Block-Level Grammar\n */\n\nvar block = {\n  newline: /^\\n+/,\n  code: /^( {4}[^\\n]+\\n*)+/,\n  fences: noop,\n  hr: /^( *[-*_]){3,} *(?:\\n+|$)/,\n  heading: /^ *(#{1,6}) *([^\\n]+?) *#* *(?:\\n+|$)/,\n  nptable: noop,\n  lheading: /^([^\\n]+)\\n *(=|-){2,} *(?:\\n+|$)/,\n  blockquote: /^( *>[^\\n]+(\\n[^\\n]+)*\\n*)+/,\n  list: /^( *)(bull) [\\s\\S]+?(?:hr|\\n{2,}(?! )(?!\\1bull )\\n*|\\s*$)/,\n  html: /^ *(?:comment|closed|closing) *(?:\\n{2,}|\\s*$)/,\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +[\"(]([^\\n]+)[\")])? *(?:\\n+|$)/,\n  table: noop,\n  paragraph: /^((?:[^\\n]+\\n?(?!hr|heading|lheading|blockquote|tag|def))+)\\n*/,\n  text: /^[^\\n]+/\n};\n\nblock.bullet = /(?:[*+-]|\\d+\\.)/;\nblock.item = /^( *)(bull) [^\\n]*(?:\\n(?!\\1bull )[^\\n]*)*/;\nblock.item = replace(block.item, 'gm')\n  (/bull/g, block.bullet)\n  ();\n\nblock.list = replace(block.list)\n  (/bull/g, block.bullet)\n  ('hr', /\\n+(?=(?: *[-*_]){3,} *(?:\\n+|$))/)\n  ();\n\nblock._tag = '(?!(?:'\n  + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code'\n  + '|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo'\n  + '|span|br|wbr|ins|del|img)\\\\b)\\\\w+(?!:/|@)\\\\b';\n\nblock.html = replace(block.html)\n  ('comment', /<!--[\\s\\S]*?-->/)\n  ('closed', /<(tag)[\\s\\S]+?<\\/\\1>/)\n  ('closing', /<tag(?:\"[^\"]*\"|'[^']*'|[^'\">])*?>/)\n  (/tag/g, block._tag)\n  ();\n\nblock.paragraph = replace(block.paragraph)\n  ('hr', block.hr)\n  ('heading', block.heading)\n  ('lheading', block.lheading)\n  ('blockquote', block.blockquote)\n  ('tag', '<' + block._tag)\n  ('def', block.def)\n  ();\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = merge({}, block);\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = merge({}, block.normal, {\n  fences: /^ *(`{3,}|~{3,}) *(\\S+)? *\\n([\\s\\S]+?)\\s*\\1 *(?:\\n+|$)/,\n  paragraph: /^/\n});\n\nblock.gfm.paragraph = replace(block.paragraph)\n  ('(?!', '(?!'\n    + block.gfm.fences.source.replace('\\\\1', '\\\\2') + '|'\n    + block.list.source.replace('\\\\1', '\\\\3') + '|')\n  ();\n\n/**\n * GFM + Tables Block Grammar\n */\n\nblock.tables = merge({}, block.gfm, {\n  nptable: /^ *(\\S.*\\|.*)\\n *([-:]+ *\\|[-| :]*)\\n((?:.*\\|.*(?:\\n|$))*)\\n*/,\n  table: /^ *\\|(.+)\\n *\\|( *[-:]+[-| :]*)\\n((?: *\\|.*(?:\\n|$))*)\\n*/\n});\n\n/**\n * Block Lexer\n */\n\nfunction Lexer(options) {\n  this.tokens = [];\n  this.tokens.links = {};\n  this.options = options || marked.defaults;\n  this.rules = block.normal;\n\n  if (this.options.gfm) {\n    if (this.options.tables) {\n      this.rules = block.tables;\n    } else {\n      this.rules = block.gfm;\n    }\n  }\n}\n\n/**\n * Expose Block Rules\n */\n\nLexer.rules = block;\n\n/**\n * Static Lex Method\n */\n\nLexer.lex = function(src, options) {\n  var lexer = new Lexer(options);\n  return lexer.lex(src);\n};\n\n/**\n * Preprocessing\n */\n\nLexer.prototype.lex = function(src) {\n  src = src\n    .replace(/\\r\\n|\\r/g, '\\n')\n    .replace(/\\t/g, '    ')\n    .replace(/\\u00a0/g, ' ')\n    .replace(/\\u2424/g, '\\n');\n\n  return this.token(src, true);\n};\n\n/**\n * Lexing\n */\n\nLexer.prototype.token = function(src, top) {\n  var src = src.replace(/^ +$/gm, '')\n    , next\n    , loose\n    , cap\n    , bull\n    , b\n    , item\n    , space\n    , i\n    , l;\n\n  while (src) {\n    // newline\n    if (cap = this.rules.newline.exec(src)) {\n      src = src.substring(cap[0].length);\n      if (cap[0].length > 1) {\n        this.tokens.push({\n          type: 'space'\n        });\n      }\n    }\n\n    // code\n    if (cap = this.rules.code.exec(src)) {\n      src = src.substring(cap[0].length);\n      cap = cap[0].replace(/^ {4}/gm, '');\n      this.tokens.push({\n        type: 'code',\n        text: !this.options.pedantic\n          ? cap.replace(/\\n+$/, '')\n          : cap\n      });\n      continue;\n    }\n\n    // fences (gfm)\n    if (cap = this.rules.fences.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'code',\n        lang: cap[2],\n        text: cap[3]\n      });\n      continue;\n    }\n\n    // heading\n    if (cap = this.rules.heading.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'heading',\n        depth: cap[1].length,\n        text: cap[2]\n      });\n      continue;\n    }\n\n    // table no leading pipe (gfm)\n    if (top && (cap = this.rules.nptable.exec(src))) {\n      src = src.substring(cap[0].length);\n\n      item = {\n        type: 'table',\n        header: cap[1].replace(/^ *| *\\| *$/g, '').split(/ *\\| */),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        cells: cap[3].replace(/\\n$/, '').split('\\n')\n      };\n\n      for (i = 0; i < item.align.length; i++) {\n        if (/^ *-+: *$/.test(item.align[i])) {\n          item.align[i] = 'right';\n        } else if (/^ *:-+: *$/.test(item.align[i])) {\n          item.align[i] = 'center';\n        } else if (/^ *:-+ *$/.test(item.align[i])) {\n          item.align[i] = 'left';\n        } else {\n          item.align[i] = null;\n        }\n      }\n\n      for (i = 0; i < item.cells.length; i++) {\n        item.cells[i] = item.cells[i].split(/ *\\| */);\n      }\n\n      this.tokens.push(item);\n\n      continue;\n    }\n\n    // lheading\n    if (cap = this.rules.lheading.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'heading',\n        depth: cap[2] === '=' ? 1 : 2,\n        text: cap[1]\n      });\n      continue;\n    }\n\n    // hr\n    if (cap = this.rules.hr.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'hr'\n      });\n      continue;\n    }\n\n    // blockquote\n    if (cap = this.rules.blockquote.exec(src)) {\n      src = src.substring(cap[0].length);\n\n      this.tokens.push({\n        type: 'blockquote_start'\n      });\n\n      cap = cap[0].replace(/^ *> ?/gm, '');\n\n      // Pass `top` to keep the current\n      // \"toplevel\" state. This is exactly\n      // how markdown.pl works.\n      this.token(cap, top);\n\n      this.tokens.push({\n        type: 'blockquote_end'\n      });\n\n      continue;\n    }\n\n    // list\n    if (cap = this.rules.list.exec(src)) {\n      src = src.substring(cap[0].length);\n      bull = cap[2];\n\n      this.tokens.push({\n        type: 'list_start',\n        ordered: bull.length > 1\n      });\n\n      // Get each top-level item.\n      cap = cap[0].match(this.rules.item);\n\n      next = false;\n      l = cap.length;\n      i = 0;\n\n      for (; i < l; i++) {\n        item = cap[i];\n\n        // Remove the list item's bullet\n        // so it is seen as the next token.\n        space = item.length;\n        item = item.replace(/^ *([*+-]|\\d+\\.) +/, '');\n\n        // Outdent whatever the\n        // list item contains. Hacky.\n        if (~item.indexOf('\\n ')) {\n          space -= item.length;\n          item = !this.options.pedantic\n            ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '')\n            : item.replace(/^ {1,4}/gm, '');\n        }\n\n        // Determine whether the next list item belongs here.\n        // Backpedal if it does not belong in this list.\n        if (this.options.smartLists && i !== l - 1) {\n          b = block.bullet.exec(cap[i + 1])[0];\n          if (bull !== b && !(bull.length > 1 && b.length > 1)) {\n            src = cap.slice(i + 1).join('\\n') + src;\n            i = l - 1;\n          }\n        }\n\n        // Determine whether item is loose or not.\n        // Use: /(^|\\n)(?! )[^\\n]+\\n\\n(?!\\s*$)/\n        // for discount behavior.\n        loose = next || /\\n\\n(?!\\s*$)/.test(item);\n        if (i !== l - 1) {\n          next = item.charAt(item.length - 1) === '\\n';\n          if (!loose) loose = next;\n        }\n\n        this.tokens.push({\n          type: loose\n            ? 'loose_item_start'\n            : 'list_item_start'\n        });\n\n        // Recurse.\n        this.token(item, false);\n\n        this.tokens.push({\n          type: 'list_item_end'\n        });\n      }\n\n      this.tokens.push({\n        type: 'list_end'\n      });\n\n      continue;\n    }\n\n    // html\n    if (cap = this.rules.html.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: this.options.sanitize\n          ? 'paragraph'\n          : 'html',\n        pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n        text: cap[0]\n      });\n      continue;\n    }\n\n    // def\n    if (top && (cap = this.rules.def.exec(src))) {\n      src = src.substring(cap[0].length);\n      this.tokens.links[cap[1].toLowerCase()] = {\n        href: cap[2],\n        title: cap[3]\n      };\n      continue;\n    }\n\n    // table (gfm)\n    if (top && (cap = this.rules.table.exec(src))) {\n      src = src.substring(cap[0].length);\n\n      item = {\n        type: 'table',\n        header: cap[1].replace(/^ *| *\\| *$/g, '').split(/ *\\| */),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        cells: cap[3].replace(/(?: *\\| *)?\\n$/, '').split('\\n')\n      };\n\n      for (i = 0; i < item.align.length; i++) {\n        if (/^ *-+: *$/.test(item.align[i])) {\n          item.align[i] = 'right';\n        } else if (/^ *:-+: *$/.test(item.align[i])) {\n          item.align[i] = 'center';\n        } else if (/^ *:-+ *$/.test(item.align[i])) {\n          item.align[i] = 'left';\n        } else {\n          item.align[i] = null;\n        }\n      }\n\n      for (i = 0; i < item.cells.length; i++) {\n        item.cells[i] = item.cells[i]\n          .replace(/^ *\\| *| *\\| *$/g, '')\n          .split(/ *\\| */);\n      }\n\n      this.tokens.push(item);\n\n      continue;\n    }\n\n    // top-level paragraph\n    if (top && (cap = this.rules.paragraph.exec(src))) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'paragraph',\n        text: cap[1].charAt(cap[1].length - 1) === '\\n'\n          ? cap[1].slice(0, -1)\n          : cap[1]\n      });\n      continue;\n    }\n\n    // text\n    if (cap = this.rules.text.exec(src)) {\n      // Top-level should never reach here.\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'text',\n        text: cap[0]\n      });\n      continue;\n    }\n\n    if (src) {\n      throw new\n        Error('Infinite loop on byte: ' + src.charCodeAt(0));\n    }\n  }\n\n  return this.tokens;\n};\n\n/**\n * Inline-Level Grammar\n */\n\nvar inline = {\n  escape: /^\\\\([\\\\`*{}\\[\\]()#+\\-.!_>])/,\n  autolink: /^<([^ >]+(@|:\\/)[^ >]+)>/,\n  url: noop,\n  tag: /^<!--[\\s\\S]*?-->|^<\\/?\\w+(?:\"[^\"]*\"|'[^']*'|[^'\">])*?>/,\n  link: /^!?\\[(inside)\\]\\(href\\)/,\n  reflink: /^!?\\[(inside)\\]\\s*\\[([^\\]]*)\\]/,\n  nolink: /^!?\\[((?:\\[[^\\]]*\\]|[^\\[\\]])*)\\]/,\n  strong: /^__([\\s\\S]+?)__(?!_)|^\\*\\*([\\s\\S]+?)\\*\\*(?!\\*)/,\n  em: /^\\b_((?:__|[\\s\\S])+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,\n  code: /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/,\n  br: /^ {2,}\\n(?!\\s*$)/,\n  del: noop,\n  text: /^[\\s\\S]+?(?=[\\\\<!\\[_*`]| {2,}\\n|$)/\n};\n\ninline._inside = /(?:\\[[^\\]]*\\]|[^\\[\\]]|\\](?=[^\\[]*\\]))*/;\ninline._href = /\\s*<?([\\s\\S]*?)>?(?:\\s+['\"]([\\s\\S]*?)['\"])?\\s*/;\n\ninline.link = replace(inline.link)\n  ('inside', inline._inside)\n  ('href', inline._href)\n  ();\n\ninline.reflink = replace(inline.reflink)\n  ('inside', inline._inside)\n  ();\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = merge({}, inline);\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = merge({}, inline.normal, {\n  strong: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n  em: /^_(?=\\S)([\\s\\S]*?\\S)_(?!_)|^\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)/\n});\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = merge({}, inline.normal, {\n  escape: replace(inline.escape)('])', '~|])')(),\n  url: /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/,\n  del: /^~~(?=\\S)([\\s\\S]*?\\S)~~/,\n  text: replace(inline.text)\n    (']|', '~]|')\n    ('|', '|https?://|')\n    ()\n});\n\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = merge({}, inline.gfm, {\n  br: replace(inline.br)('{2,}', '*')(),\n  text: replace(inline.gfm.text)('{2,}', '*')()\n});\n\n/**\n * Inline Lexer & Compiler\n */\n\nfunction InlineLexer(links, options) {\n  this.options = options || marked.defaults;\n  this.links = links;\n  this.rules = inline.normal;\n  this.renderer = this.options.renderer || new Renderer;\n\n  if (!this.links) {\n    throw new\n      Error('Tokens array requires a `links` property.');\n  }\n\n  if (this.options.gfm) {\n    if (this.options.breaks) {\n      this.rules = inline.breaks;\n    } else {\n      this.rules = inline.gfm;\n    }\n  } else if (this.options.pedantic) {\n    this.rules = inline.pedantic;\n  }\n}\n\n/**\n * Expose Inline Rules\n */\n\nInlineLexer.rules = inline;\n\n/**\n * Static Lexing/Compiling Method\n */\n\nInlineLexer.output = function(src, links, options) {\n  var inline = new InlineLexer(links, options);\n  return inline.output(src);\n};\n\n/**\n * Lexing/Compiling\n */\n\nInlineLexer.prototype.output = function(src) {\n  var out = ''\n    , link\n    , text\n    , href\n    , cap;\n\n  while (src) {\n    // escape\n    if (cap = this.rules.escape.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += cap[1];\n      continue;\n    }\n\n    // autolink\n    if (cap = this.rules.autolink.exec(src)) {\n      src = src.substring(cap[0].length);\n      if (cap[2] === '@') {\n        text = cap[1].charAt(6) === ':'\n          ? this.mangle(cap[1].substring(7))\n          : this.mangle(cap[1]);\n        href = this.mangle('mailto:') + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n      out += this.renderer.link(href, null, text);\n      continue;\n    }\n\n    // url (gfm)\n    if (cap = this.rules.url.exec(src)) {\n      src = src.substring(cap[0].length);\n      text = escape(cap[1]);\n      href = text;\n      out += this.renderer.link(href, null, text);\n      continue;\n    }\n\n    // tag\n    if (cap = this.rules.tag.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.options.sanitize\n        ? escape(cap[0])\n        : cap[0];\n      continue;\n    }\n\n    // link\n    if (cap = this.rules.link.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.outputLink(cap, {\n        href: cap[2],\n        title: cap[3]\n      });\n      continue;\n    }\n\n    // reflink, nolink\n    if ((cap = this.rules.reflink.exec(src))\n        || (cap = this.rules.nolink.exec(src))) {\n      src = src.substring(cap[0].length);\n      link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = this.links[link.toLowerCase()];\n      if (!link || !link.href) {\n        out += cap[0].charAt(0);\n        src = cap[0].substring(1) + src;\n        continue;\n      }\n      out += this.outputLink(cap, link);\n      continue;\n    }\n\n    // strong\n    if (cap = this.rules.strong.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.strong(this.output(cap[2] || cap[1]));\n      continue;\n    }\n\n    // em\n    if (cap = this.rules.em.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.em(this.output(cap[2] || cap[1]));\n      continue;\n    }\n\n    // code\n    if (cap = this.rules.code.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.codespan(escape(cap[2], true));\n      continue;\n    }\n\n    // br\n    if (cap = this.rules.br.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.br();\n      continue;\n    }\n\n    // del (gfm)\n    if (cap = this.rules.del.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.del(this.output(cap[1]));\n      continue;\n    }\n\n    // text\n    if (cap = this.rules.text.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += escape(this.smartypants(cap[0]));\n      continue;\n    }\n\n    if (src) {\n      throw new\n        Error('Infinite loop on byte: ' + src.charCodeAt(0));\n    }\n  }\n\n  return out;\n};\n\n/**\n * Compile Link\n */\n\nInlineLexer.prototype.outputLink = function(cap, link) {\n  var href = escape(link.href)\n    , title = link.title ? escape(link.title) : null;\n\n  return cap[0].charAt(0) !== '!'\n    ? this.renderer.link(href, title, this.output(cap[1]))\n    : this.renderer.image(href, title, escape(cap[1]));\n};\n\n/**\n * Smartypants Transformations\n */\n\nInlineLexer.prototype.smartypants = function(text) {\n  if (!this.options.smartypants) return text;\n  return text\n    // em-dashes\n    .replace(/--/g, '\\u2014')\n    // opening singles\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n    // closing singles & apostrophes\n    .replace(/'/g, '\\u2019')\n    // opening doubles\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n    // closing doubles\n    .replace(/\"/g, '\\u201d')\n    // ellipses\n    .replace(/\\.{3}/g, '\\u2026');\n};\n\n/**\n * Mangle Links\n */\n\nInlineLexer.prototype.mangle = function(text) {\n  var out = ''\n    , l = text.length\n    , i = 0\n    , ch;\n\n  for (; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n};\n\n/**\n * Renderer\n */\n\nfunction Renderer() {}\n\nRenderer.prototype.code = function(code, lang, escaped, options) {\n  options = options || {};\n\n  if (options.highlight) {\n    var out = options.highlight(code, lang);\n    if (out != null && out !== code) {\n      escaped = true;\n      code = out;\n    }\n  }\n\n  if (!lang) {\n    return '<pre><code>'\n      + (escaped ? code : escape(code, true))\n      + '\\n</code></pre>';\n  }\n\n  return '<pre><code class=\"'\n    + options.langPrefix\n    + lang\n    + '\">'\n    + (escaped ? code : escape(code))\n    + '\\n</code></pre>\\n';\n};\n\nRenderer.prototype.blockquote = function(quote) {\n  return '<blockquote>\\n' + quote + '</blockquote>\\n';\n};\n\nRenderer.prototype.html = function(html) {\n  return html;\n};\n\nRenderer.prototype.heading = function(text, level, raw, options) {\n  return '<h'\n    + level\n    + ' id=\"'\n    + options.headerPrefix\n    + raw.toLowerCase().replace(/[^\\w]+/g, '-')\n    + '\">'\n    + text\n    + '</h'\n    + level\n    + '>\\n';\n};\n\nRenderer.prototype.hr = function() {\n  return '<hr>\\n';\n};\n\nRenderer.prototype.list = function(body, ordered) {\n  var type = ordered ? 'ol' : 'ul';\n  return '<' + type + '>\\n' + body + '</' + type + '>\\n';\n};\n\nRenderer.prototype.listitem = function(text) {\n  return '<li>' + text + '</li>\\n';\n};\n\nRenderer.prototype.paragraph = function(text) {\n  return '<p>' + text + '</p>\\n';\n};\n\nRenderer.prototype.table = function(header, body) {\n  return '<table>\\n'\n    + '<thead>\\n'\n    + header\n    + '</thead>\\n'\n    + '<tbody>\\n'\n    + body\n    + '</tbody>\\n'\n    + '</table>\\n';\n};\n\nRenderer.prototype.tablerow = function(content) {\n  return '<tr>\\n' + content + '</tr>\\n';\n};\n\nRenderer.prototype.tablecell = function(content, flags) {\n  var type = flags.header ? 'th' : 'td';\n  var tag = flags.align\n    ? '<' + type + ' style=\"text-align:' + flags.align + '\">'\n    : '<' + type + '>';\n  return tag + content + '</' + type + '>\\n';\n};\n\n// span level renderer\nRenderer.prototype.strong = function(text) {\n  return '<strong>' + text + '</strong>';\n};\n\nRenderer.prototype.em = function(text) {\n  return '<em>' + text + '</em>';\n};\n\nRenderer.prototype.codespan = function(text) {\n  return '<code>' + text + '</code>';\n};\n\nRenderer.prototype.br = function() {\n  return '<br>';\n};\n\nRenderer.prototype.del = function(text) {\n  return '<del>' + text + '</del>';\n};\n\nRenderer.prototype.link = function(href, title, text) {\n  var out = '<a href=\"' + href + '\"';\n  if (title) {\n    out += ' title=\"' + title + '\"';\n  }\n  out += '>' + text + '</a>';\n  return out;\n};\n\nRenderer.prototype.image = function(href, title, text) {\n  var out = '<img src=\"' + href + '\" alt=\"' + text + '\"';\n  if (title) {\n    out += ' title=\"' + title + '\"';\n  }\n  out += '>';\n  return out;\n};\n\n/**\n * Parsing & Compiling\n */\n\nfunction Parser(options) {\n  this.tokens = [];\n  this.token = null;\n  this.options = options || marked.defaults;\n  this.options.renderer = this.options.renderer || new Renderer;\n  this.renderer = this.options.renderer;\n}\n\n/**\n * Static Parse Method\n */\n\nParser.parse = function(src, options, renderer) {\n  var parser = new Parser(options, renderer);\n  return parser.parse(src);\n};\n\n/**\n * Parse Loop\n */\n\nParser.prototype.parse = function(src) {\n  this.inline = new InlineLexer(src.links, this.options, this.renderer);\n  this.tokens = src.reverse();\n\n  var out = '';\n  while (this.next()) {\n    out += this.tok();\n  }\n\n  return out;\n};\n\n/**\n * Next Token\n */\n\nParser.prototype.next = function() {\n  return this.token = this.tokens.pop();\n};\n\n/**\n * Preview Next Token\n */\n\nParser.prototype.peek = function() {\n  return this.tokens[this.tokens.length - 1] || 0;\n};\n\n/**\n * Parse Text Tokens\n */\n\nParser.prototype.parseText = function() {\n  var body = this.token.text;\n\n  while (this.peek().type === 'text') {\n    body += '\\n' + this.next().text;\n  }\n\n  return this.inline.output(body);\n};\n\n/**\n * Parse Current Token\n */\n\nParser.prototype.tok = function() {\n  switch (this.token.type) {\n    case 'space': {\n      return '';\n    }\n    case 'hr': {\n      return this.renderer.hr();\n    }\n    case 'heading': {\n      return this.renderer.heading(\n        this.inline.output(this.token.text),\n        this.token.depth,\n        this.token.text,\n        this.options\n      );\n    }\n    case 'code': {\n      return this.renderer.code(this.token.text,\n        this.token.lang,\n        this.token.escaped,\n        this.options);\n    }\n    case 'table': {\n      var header = ''\n        , body = ''\n        , i\n        , row\n        , cell\n        , flags\n        , j;\n\n      // header\n      cell = '';\n      for (i = 0; i < this.token.header.length; i++) {\n        flags = { header: true, align: this.token.align[i] };\n        cell += this.renderer.tablecell(\n          this.inline.output(this.token.header[i]),\n          { header: true, align: this.token.align[i] }\n        );\n      }\n      header += this.renderer.tablerow(cell);\n\n      for (i = 0; i < this.token.cells.length; i++) {\n        row = this.token.cells[i];\n\n        cell = '';\n        for (j = 0; j < row.length; j++) {\n          cell += this.renderer.tablecell(\n            this.inline.output(row[j]),\n            { header: false, align: this.token.align[j] }\n          );\n        }\n\n        body += this.renderer.tablerow(cell);\n      }\n      return this.renderer.table(header, body);\n    }\n    case 'blockquote_start': {\n      var body = '';\n\n      while (this.next().type !== 'blockquote_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.blockquote(body);\n    }\n    case 'list_start': {\n      var body = ''\n        , ordered = this.token.ordered;\n\n      while (this.next().type !== 'list_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.list(body, ordered);\n    }\n    case 'list_item_start': {\n      var body = '';\n\n      while (this.next().type !== 'list_item_end') {\n        body += this.token.type === 'text'\n          ? this.parseText()\n          : this.tok();\n      }\n\n      return this.renderer.listitem(body);\n    }\n    case 'loose_item_start': {\n      var body = '';\n\n      while (this.next().type !== 'list_item_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.listitem(body);\n    }\n    case 'html': {\n      var html = !this.token.pre && !this.options.pedantic\n        ? this.inline.output(this.token.text)\n        : this.token.text;\n      return this.renderer.html(html);\n    }\n    case 'paragraph': {\n      return this.renderer.paragraph(this.inline.output(this.token.text));\n    }\n    case 'text': {\n      return this.renderer.paragraph(this.parseText());\n    }\n  }\n};\n\n/**\n * Helpers\n */\n\nfunction escape(html, encode) {\n  return html\n    .replace(!encode ? /&(?!#?\\w+;)/g : /&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#39;');\n}\n\nfunction replace(regex, opt) {\n  regex = regex.source;\n  opt = opt || '';\n  return function self(name, val) {\n    if (!name) return new RegExp(regex, opt);\n    val = val.source || val;\n    val = val.replace(/(^|[^\\[])\\^/g, '$1');\n    regex = regex.replace(name, val);\n    return self;\n  };\n}\n\nfunction noop() {}\nnoop.exec = noop;\n\nfunction merge(obj) {\n  var i = 1\n    , target\n    , key;\n\n  for (; i < arguments.length; i++) {\n    target = arguments[i];\n    for (key in target) {\n      if (Object.prototype.hasOwnProperty.call(target, key)) {\n        obj[key] = target[key];\n      }\n    }\n  }\n\n  return obj;\n}\n\n\n/**\n * Marked\n */\n\nfunction marked(src, opt, callback) {\n  if (callback || typeof opt === 'function') {\n    if (!callback) {\n      callback = opt;\n      opt = null;\n    }\n\n    opt = merge({}, marked.defaults, opt || {});\n\n    var highlight = opt.highlight\n      , tokens\n      , pending\n      , i = 0;\n\n    try {\n      tokens = Lexer.lex(src, opt)\n    } catch (e) {\n      return callback(e);\n    }\n\n    pending = tokens.length;\n\n    var done = function() {\n      var out, err;\n\n      try {\n        out = Parser.parse(tokens, opt);\n      } catch (e) {\n        err = e;\n      }\n\n      opt.highlight = highlight;\n\n      return err\n        ? callback(err)\n        : callback(null, out);\n    };\n\n    if (!highlight || highlight.length < 3) {\n      return done();\n    }\n\n    delete opt.highlight;\n\n    if (!pending) return done();\n\n    for (; i < tokens.length; i++) {\n      (function(token) {\n        if (token.type !== 'code') {\n          return --pending || done();\n        }\n        return highlight(token.text, token.lang, function(err, code) {\n          if (code == null || code === token.text) {\n            return --pending || done();\n          }\n          token.text = code;\n          token.escaped = true;\n          --pending || done();\n        });\n      })(tokens[i]);\n    }\n\n    return;\n  }\n  try {\n    if (opt) opt = merge({}, marked.defaults, opt);\n    return Parser.parse(Lexer.lex(src, opt), opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/chjj/marked.';\n    if ((opt || marked.defaults).silent) {\n      return '<p>An error occured:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n    }\n    throw e;\n  }\n}\n\n/**\n * Options\n */\n\nmarked.options =\nmarked.setOptions = function(opt) {\n  merge(marked.defaults, opt);\n  return marked;\n};\n\nmarked.defaults = {\n  gfm: true,\n  tables: true,\n  breaks: false,\n  pedantic: false,\n  sanitize: false,\n  smartLists: false,\n  silent: false,\n  highlight: null,\n  langPrefix: 'lang-',\n  smartypants: false,\n  headerPrefix: '',\n  renderer: new Renderer\n};\n\n/**\n * Expose\n */\n\nmarked.Parser = Parser;\nmarked.parser = Parser.parse;\n\nmarked.Renderer = Renderer;\n\nmarked.Lexer = Lexer;\nmarked.lexer = Lexer.lex;\n\nmarked.InlineLexer = InlineLexer;\nmarked.inlineLexer = InlineLexer.output;\n\nmarked.parse = marked;\n\nif (true) {\n  module.exports = marked;\n} else if (typeof define === 'function' && define.amd) {\n  define(function() { return marked; });\n} else {\n  this.marked = marked;\n}\n\n}).call(function() {\n  return this || (typeof window !== 'undefined' ? window : global);\n}());\n\n/* WEBPACK VAR INJECTION */}.call(exports, require, (function() { return this; }())))\n\n// WEBPACK FOOTER\n// module.id = 38\n// module.readableIdentifier = ./~/marked/lib/marked.js\n//@ sourceURL=webpack-module:///./~/marked/lib/marked.js")
}});